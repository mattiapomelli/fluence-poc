/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.9.4
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4.js'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4.js';


// Services

export interface MessageDef {
    onMessage: (message: string, callParams: CallParams$$<'message'>) => string | Promise<string>;
}
export function registerMessage(service: MessageDef): void;
export function registerMessage(serviceId: string, service: MessageDef): void;
export function registerMessage(peer: FluencePeer, service: MessageDef): void;
export function registerMessage(peer: FluencePeer, serviceId: string, service: MessageDef): void;
       

export function registerMessage(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "Message",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "onMessage" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "message" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
 

export function sendMessage(
    targetPeerId: string,
    targetRelayPeerId: string,
    message: string,
    config?: {ttl?: number}
): Promise<string>;

export function sendMessage(
    peer: FluencePeer,
    targetPeerId: string,
    targetRelayPeerId: string,
    message: string,
    config?: {ttl?: number}
): Promise<string>;

export function sendMessage(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "targetPeerId") [] targetPeerId)
                           )
                           (call %init_peer_id% ("getDataSrv" "targetRelayPeerId") [] targetRelayPeerId)
                          )
                          (call %init_peer_id% ("getDataSrv" "message") [] message)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call targetRelayPeerId ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call targetPeerId ("Message" "onMessage") [message] msg)
                          (call targetRelayPeerId ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call targetRelayPeerId ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [msg])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "sendMessage",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "targetPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "targetRelayPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "message" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
